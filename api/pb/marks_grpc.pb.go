// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: api/marks.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarksServiceClient is the client API for MarksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarksServiceClient interface {
	CreateMarksRPC(ctx context.Context, in *CreateMarksRequest, opts ...grpc.CallOption) (*CreateMarksResponse, error)
	GetMarksRPC(ctx context.Context, in *GetMarksRequest, opts ...grpc.CallOption) (*GetMarksResponse, error)
	UpdateMarksRPC(ctx context.Context, in *UpdateMarksRequest, opts ...grpc.CallOption) (*UpdateMarksResponse, error)
	DeleteMarksRPC(ctx context.Context, in *DeleteMarksRequest, opts ...grpc.CallOption) (*DeleteMarksResponse, error)
}

type marksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarksServiceClient(cc grpc.ClientConnInterface) MarksServiceClient {
	return &marksServiceClient{cc}
}

func (c *marksServiceClient) CreateMarksRPC(ctx context.Context, in *CreateMarksRequest, opts ...grpc.CallOption) (*CreateMarksResponse, error) {
	out := new(CreateMarksResponse)
	err := c.cc.Invoke(ctx, "/api.MarksService/CreateMarksRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marksServiceClient) GetMarksRPC(ctx context.Context, in *GetMarksRequest, opts ...grpc.CallOption) (*GetMarksResponse, error) {
	out := new(GetMarksResponse)
	err := c.cc.Invoke(ctx, "/api.MarksService/GetMarksRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marksServiceClient) UpdateMarksRPC(ctx context.Context, in *UpdateMarksRequest, opts ...grpc.CallOption) (*UpdateMarksResponse, error) {
	out := new(UpdateMarksResponse)
	err := c.cc.Invoke(ctx, "/api.MarksService/UpdateMarksRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marksServiceClient) DeleteMarksRPC(ctx context.Context, in *DeleteMarksRequest, opts ...grpc.CallOption) (*DeleteMarksResponse, error) {
	out := new(DeleteMarksResponse)
	err := c.cc.Invoke(ctx, "/api.MarksService/DeleteMarksRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarksServiceServer is the server API for MarksService service.
// All implementations must embed UnimplementedMarksServiceServer
// for forward compatibility
type MarksServiceServer interface {
	CreateMarksRPC(context.Context, *CreateMarksRequest) (*CreateMarksResponse, error)
	GetMarksRPC(context.Context, *GetMarksRequest) (*GetMarksResponse, error)
	UpdateMarksRPC(context.Context, *UpdateMarksRequest) (*UpdateMarksResponse, error)
	DeleteMarksRPC(context.Context, *DeleteMarksRequest) (*DeleteMarksResponse, error)
	mustEmbedUnimplementedMarksServiceServer()
}

// UnimplementedMarksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarksServiceServer struct {
}

func (UnimplementedMarksServiceServer) CreateMarksRPC(context.Context, *CreateMarksRequest) (*CreateMarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMarksRPC not implemented")
}
func (UnimplementedMarksServiceServer) GetMarksRPC(context.Context, *GetMarksRequest) (*GetMarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarksRPC not implemented")
}
func (UnimplementedMarksServiceServer) UpdateMarksRPC(context.Context, *UpdateMarksRequest) (*UpdateMarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarksRPC not implemented")
}
func (UnimplementedMarksServiceServer) DeleteMarksRPC(context.Context, *DeleteMarksRequest) (*DeleteMarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMarksRPC not implemented")
}
func (UnimplementedMarksServiceServer) mustEmbedUnimplementedMarksServiceServer() {}

// UnsafeMarksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarksServiceServer will
// result in compilation errors.
type UnsafeMarksServiceServer interface {
	mustEmbedUnimplementedMarksServiceServer()
}

func RegisterMarksServiceServer(s grpc.ServiceRegistrar, srv MarksServiceServer) {
	s.RegisterService(&MarksService_ServiceDesc, srv)
}

func _MarksService_CreateMarksRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarksServiceServer).CreateMarksRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarksService/CreateMarksRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarksServiceServer).CreateMarksRPC(ctx, req.(*CreateMarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarksService_GetMarksRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarksServiceServer).GetMarksRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarksService/GetMarksRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarksServiceServer).GetMarksRPC(ctx, req.(*GetMarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarksService_UpdateMarksRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarksServiceServer).UpdateMarksRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarksService/UpdateMarksRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarksServiceServer).UpdateMarksRPC(ctx, req.(*UpdateMarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarksService_DeleteMarksRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarksServiceServer).DeleteMarksRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarksService/DeleteMarksRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarksServiceServer).DeleteMarksRPC(ctx, req.(*DeleteMarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarksService_ServiceDesc is the grpc.ServiceDesc for MarksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MarksService",
	HandlerType: (*MarksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMarksRPC",
			Handler:    _MarksService_CreateMarksRPC_Handler,
		},
		{
			MethodName: "GetMarksRPC",
			Handler:    _MarksService_GetMarksRPC_Handler,
		},
		{
			MethodName: "UpdateMarksRPC",
			Handler:    _MarksService_UpdateMarksRPC_Handler,
		},
		{
			MethodName: "DeleteMarksRPC",
			Handler:    _MarksService_DeleteMarksRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/marks.proto",
}
